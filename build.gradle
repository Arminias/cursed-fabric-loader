plugins {
	id 'java'
	id 'idea'
	id 'eclipse'
	id 'maven-publish'
	id("org.cadixdev.licenser") version "0.5.0"
	//id("fabric-loom") version "0.2.6-SNAPSHOT"
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.9'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

configurations {
	installed
	launchwrapper.extendsFrom installed
	implementation.extendsFrom(installed, launchwrapper)
	testCompileOnly.extendsFrom compileOnly
}

dependencies {
	//minecraft "com.mojang:minecraft:1.14.4"
	//mappings "net.fabricmc:yarn:1.14.4+build.1"
	installed group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
	installed group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
	installed group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	installed group: 'com.google.guava', name: 'guava', version: '21.0'

	// Minecraft's JAR uses these annotations
	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

	// fabric-loader dependencies
	annotationProcessor installed ("org.ow2.asm:asm:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-analysis:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-commons:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-tree:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-util:${project.asm_version}")

	installed('net.fabricmc:sponge-mixin:0.9.2+mixin.0.8.2') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	installed 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	installed 'net.fabricmc:tiny-remapper:0.3.0.70'
	installed 'net.fabricmc:access-widener:1.0.0'

	installed 'com.google.jimfs:jimfs:1.2-fabric'
	installed 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	launchwrapper ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	launchwrapper 'net.sf.jopt-simple:jopt-simple:5.0.3'

	testCompileOnly 'org.jetbrains:annotations:19.0.0'

	// Unit testing for mod metadata
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

import groovy.json.JsonBuilder

String generalInstallerJSON(Configuration config, Closure extra) {
	def json = new JsonBuilder()

	def emptyList = [] //Groovy makes json([]) ambiguous so we take the clear route
	json {
		version 1
		libraries {
			client emptyList
			common json(config.allDependencies.findAll { 
				it instanceof ExternalDependency 
			}) {dependency ->
				def repo = ['https://libraries.minecraft.net', 'https://maven.fabricmc.net', 'https://maven.minecraftforge.net'].find {repo ->
					def url = "$repo/${dependency.group.replace('.', '/')}/${dependency.name}/${dependency.version}/${dependency.name}-${dependency.version}.jar".toURL()

					def connection = url.openConnection()
					connection.requestMethod = 'HEAD'
					def back = connection.responseCode
					connection.disconnect()

					if ((200..<300).contains(back)) {
						//println "$repo has ${dependency.group}:${dependency.name}:${dependency.version}"
						return repo
					} else {
						//println "$repo lacks ${dependency.group}:${dependency.name}:${dependency.version}"
						return null
					}
				}
				if (repo == null) throw new IllegalArgumentException("Can't find repository for ${dependency.group}:${dependency.name}:${dependency.version}")

				name "${dependency.group}:${dependency.name}:${dependency.version}"
				url "$repo/" //The trailing slash is probably optional
			}
			server emptyList
		}
		extra(delegate)
	}

	return json.toPrettyString()
}

task createInstallerJSON() {
	def output = file("$buildDir/generated-resources/fabric-installer.json")
	outputs.file(output)

	doLast {
		output.withWriter('utf-8') {writer ->
			writer.write(generalInstallerJSON(configurations.installed) {json ->
				json.mainClass {
					client 'net.fabricmc.loader.launch.knot.KnotClient'
					server 'net.fabricmc.loader.launch.knot.KnotServer'
				}
			})
		}
	}
}

task createInstallerLWJSON() {
	def output = file("$buildDir/generated-resources/fabric-installer.launchwrapper.json")
	outputs.file(output)

	doLast {
		output.withWriter('utf-8') {writer ->
			writer.write(generalInstallerJSON(configurations.launchwrapper) {json ->
				def emptyList = []

				json.mainClass 'net.minecraft.launchwrapper.Launch'
				json.arguments {
					client emptyList
					common emptyList
					server emptyList
				}
				json.launchwrapper {
					client json(['net.fabricmc.loader.launch.FabricClientTweaker'])
					common emptyList
					server json(['net.fabricmc.loader.launch.FabricServerTweaker'])
				}
			})
		}
	}
}

jar {
	from createInstallerJSON.outputs
	from createInstallerLWJSON.outputs
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}

	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task copyJson(type: Copy, dependsOn: createInstallerJSON) {
	from(createInstallerJSON.outputs) {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy, dependsOn: createInstallerLWJSON) {
	from(createInstallerLWJSON.outputs) {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

task installerJar(type: Jar) {
	from createInstallerJSON.outputs
	classifier 'installer'
}

build.dependsOn copyJson, copyJsonLw, installerJar

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}

build.dependsOn javadocJar

license {
	header file("HEADER")
	include '**/*.java'

	// Exclude gson since it is google's code, we just modify and bundle it
	exclude '**/lib/gson/*.java'
	exclude '**/io/github/minecraftcursedlegacy/**'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy jar
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
			}
			artifact javadocJar
			artifact installerJar
			artifact(createInstallerJSON.outputs.files.singleFile) {
				builtBy copyJson
			}
			artifact(createInstallerLWJSON.outputs.files.singleFile) {
				builtBy copyJsonLw
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}
